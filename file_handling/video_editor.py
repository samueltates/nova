from moviepy.editor import VideoFileClip
import tempfile
import asyncio
import aiofiles
from file_handling.s3 import read_file, write_file
from core.cartridges import addCartridge, update_cartridge_field




async def cut_video(video_file, edit_plan, sessionID, convoID, loadout):
    print('splitting video' + video_file + 'with edit plan' + str(edit_plan)) 
    file = await read_file(video_file)
    processed_file = tempfile.NamedTemporaryFile(suffix=".mp4", delete=False)
    processed_file.write(file)
    processed_file.close()

    clip = VideoFileClip(processed_file.name)

    for cut in edit_plan['cuts']:
        start = cut['start']
        end = cut['end']
        save_as = cut['save_as']
        clip.subclip(start, end).write_videofile(save_as)


          
        cartVal = {
            'label' : save_as,
            # 'text' : str(transcriptions),
            # 'description' : 'Image generated by openAI with prompt: ' + prompt,
            'fileName' : save_as.name,
            'extension' : 'video/mp4',
            # 'media_url' : url,
            'type' : 'media',
            'enabled' : True,
        }

        cartKey = await addCartridge(cartVal, sessionID, loadout, convoID )
        aws_key = cartKey + '.mp4'
        url = await write_file(save_as.file, aws_key) 

        await update_cartridge_field(
            {   
                'sessionID': sessionID, 
                'cartKey' : cartKey, 
                'fields': {
                    'media_url': url, 
                    'aws_key': aws_key
                }
            }, convoID, loadout, True )
                




"""
edit plan schema draft
cuts
edit_plan = {
'source': [source-file],
'type' : cut,
'cuts': [
    {
        start: [start time]
        end : [ end time]
        save_as: [file name]
    }
}

edit_plan = {
'type': combine,
'sources': [source-file],
'save_as': [file name],
}

"""