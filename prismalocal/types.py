# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template types.py.jinja --
from typing import TypeVar

import httpx
from .utils import _NoneType



# TODO: filters with aggregates should have their own recursive fields
# TODO: cleanup whitespace control
# TODO: add an argument to signify that the last iteration should be skipped


SortMode = Literal['default', 'insensitive']
SortOrder = Literal['asc', 'desc']


class _DatasourceOverrideOptional(TypedDict, total=False):
    env: str
    name: str


class DatasourceOverride(_DatasourceOverrideOptional):
    url: str


# NOTE: we don't support some options as their type hints are not publicly exposed
# https://github.com/encode/httpx/discussions/1977
class HttpConfig(TypedDict, total=False):
    app: Callable[[Mapping[str, Any], Any], Any]
    http1: bool
    http2: bool
    limits: httpx.Limits
    timeout: Union[None, float, httpx.Timeout]
    trust_env: bool
    max_redirects: int


# types that can be serialized to json by our query builder
Serializable = Union[
    None,
    bool,
    float,
    int,
    str,
    datetime.datetime,
    List[Any],
    Dict[None, Any],
    Dict[bool, Any],
    Dict[float, Any],
    Dict[int, Any],
    Dict[str, Any],
]


    

StringFilter = TypedDict(
    'StringFilter',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive1'],
            },
    total=False,
)


StringFilterRecursive1 = TypedDict(
    'StringFilterRecursive1',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive2'],
            },
    total=False,
)


StringFilterRecursive2 = TypedDict(
    'StringFilterRecursive2',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive3'],
            },
    total=False,
)


StringFilterRecursive3 = TypedDict(
    'StringFilterRecursive3',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive4'],
            },
    total=False,
)


StringFilterRecursive4 = TypedDict(
    'StringFilterRecursive4',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
                    },
    total=False,
)


class StringWithAggregatesFilter(StringFilter, total=False):
    _max: 'StringFilter'
    _min: 'StringFilter'
    _sum: 'StringFilter'
    _avg: 'StringFilter'
    _count: 'IntFilter'


    

DateTimeFilter = TypedDict(
    'DateTimeFilter',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive1'],
    },
    total=False,
)


DateTimeFilterRecursive1 = TypedDict(
    'DateTimeFilterRecursive1',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive2'],
    },
    total=False,
)


DateTimeFilterRecursive2 = TypedDict(
    'DateTimeFilterRecursive2',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive3'],
    },
    total=False,
)


DateTimeFilterRecursive3 = TypedDict(
    'DateTimeFilterRecursive3',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive4'],
    },
    total=False,
)


DateTimeFilterRecursive4 = TypedDict(
    'DateTimeFilterRecursive4',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
            },
    total=False,
)


class DateTimeWithAggregatesFilter(DateTimeFilter, total=False):
    _max: 'DateTimeFilter'
    _min: 'DateTimeFilter'
    _sum: 'DateTimeFilter'
    _avg: 'DateTimeFilter'
    _count: 'IntFilter'


    

BooleanFilter = TypedDict(
    'BooleanFilter',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive1'],
    },
    total=False,
)


BooleanFilterRecursive1 = TypedDict(
    'BooleanFilterRecursive1',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive2'],
    },
    total=False,
)


BooleanFilterRecursive2 = TypedDict(
    'BooleanFilterRecursive2',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive3'],
    },
    total=False,
)


BooleanFilterRecursive3 = TypedDict(
    'BooleanFilterRecursive3',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive4'],
    },
    total=False,
)


BooleanFilterRecursive4 = TypedDict(
    'BooleanFilterRecursive4',
    {
        'equals': bool,
            },
    total=False,
)


class BooleanWithAggregatesFilter(BooleanFilter, total=False):
    _max: 'BooleanFilter'
    _min: 'BooleanFilter'
    _sum: 'BooleanFilter'
    _avg: 'BooleanFilter'
    _count: 'IntFilter'


    

IntFilter = TypedDict(
    'IntFilter',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive1'],
    },
    total=False,
)


IntFilterRecursive1 = TypedDict(
    'IntFilterRecursive1',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive2'],
    },
    total=False,
)


IntFilterRecursive2 = TypedDict(
    'IntFilterRecursive2',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive3'],
    },
    total=False,
)


IntFilterRecursive3 = TypedDict(
    'IntFilterRecursive3',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive4'],
    },
    total=False,
)


IntFilterRecursive4 = TypedDict(
    'IntFilterRecursive4',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
            },
    total=False,
)


class IntWithAggregatesFilter(IntFilter, total=False):
    _max: 'IntFilter'
    _min: 'IntFilter'
    _sum: 'IntFilter'
    _avg: 'IntFilter'
    _count: 'IntFilter'


BigIntFilter = IntFilter
BigIntWithAggregatesFilter = IntWithAggregatesFilter
    

FloatFilter = TypedDict(
    'FloatFilter',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive1'],
    },
    total=False,
)


FloatFilterRecursive1 = TypedDict(
    'FloatFilterRecursive1',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive2'],
    },
    total=False,
)


FloatFilterRecursive2 = TypedDict(
    'FloatFilterRecursive2',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive3'],
    },
    total=False,
)


FloatFilterRecursive3 = TypedDict(
    'FloatFilterRecursive3',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive4'],
    },
    total=False,
)


FloatFilterRecursive4 = TypedDict(
    'FloatFilterRecursive4',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
            },
    total=False,
)


class FloatWithAggregatesFilter(FloatFilter, total=False):
    _max: 'FloatFilter'
    _min: 'FloatFilter'
    _sum: 'FloatFilter'
    _avg: 'FloatFilter'
    _count: 'IntFilter'


    

BytesFilter = TypedDict(
    'BytesFilter',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive1'],
    },
    total=False,
)


BytesFilterRecursive1 = TypedDict(
    'BytesFilterRecursive1',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive2'],
    },
    total=False,
)


BytesFilterRecursive2 = TypedDict(
    'BytesFilterRecursive2',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive3'],
    },
    total=False,
)


BytesFilterRecursive3 = TypedDict(
    'BytesFilterRecursive3',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive4'],
    },
    total=False,
)


BytesFilterRecursive4 = TypedDict(
    'BytesFilterRecursive4',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
            },
    total=False,
)


class BytesWithAggregatesFilter(BytesFilter, total=False):
    _max: 'BytesFilter'
    _min: 'BytesFilter'
    _sum: 'BytesFilter'
    _avg: 'BytesFilter'
    _count: 'IntFilter'


# TODO: preview feature for improving JSON filtering
JsonFilter = TypedDict(
    'JsonFilter',
    {
        'equals': 'fields.Json',
        'not': 'fields.Json',
    },
    total=False,
)


class JsonWithAggregatesFilter(JsonFilter, total=False):
    _max: 'JsonFilter'
    _min: 'JsonFilter'
    _sum: 'JsonFilter'
    _avg: 'JsonFilter'
    _count: 'IntFilter'


    

DecimalFilter = TypedDict(
    'DecimalFilter',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive1'],
    },
    total=False,
)


DecimalFilterRecursive1 = TypedDict(
    'DecimalFilterRecursive1',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive2'],
    },
    total=False,
)


DecimalFilterRecursive2 = TypedDict(
    'DecimalFilterRecursive2',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive3'],
    },
    total=False,
)


DecimalFilterRecursive3 = TypedDict(
    'DecimalFilterRecursive3',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive4'],
    },
    total=False,
)


DecimalFilterRecursive4 = TypedDict(
    'DecimalFilterRecursive4',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
            },
    total=False,
)


class DecimalWithAggregatesFilter(StringFilter, total=False):
    _max: 'DecimalFilter'
    _min: 'DecimalFilter'
    _sum: 'DecimalFilter'
    _avg: 'DecimalFilter'
    _count: 'IntFilter'


class _FloatSetInput(TypedDict):
    set: float


class _FloatDivideInput(TypedDict):
    divide: float


class _FloatMultiplyInput(TypedDict):
    multiply: float


class _FloatIncrementInput(TypedDict):
    increment: float


class _FloatDecrementInput(TypedDict):
    decrement: float


class _IntSetInput(TypedDict):
    set: int


class _IntDivideInput(TypedDict):
    divide: int


class _IntMultiplyInput(TypedDict):
    multiply: int


class _IntIncrementInput(TypedDict):
    increment: int


class _IntDecrementInput(TypedDict):
    decrement: int


AtomicFloatInput = Union[
    _FloatSetInput,
    _FloatDivideInput,
    _FloatMultiplyInput,
    _FloatIncrementInput,
    _FloatDecrementInput,
]
AtomicIntInput = Union[
    _IntSetInput,
    _IntDivideInput,
    _IntMultiplyInput,
    _IntIncrementInput,
    _IntDecrementInput,
]
AtomicBigIntInput = AtomicIntInput

class _StringListFilterEqualsInput(TypedDict):
    equals: Optional[List[_str]]


class _StringListFilterHasInput(TypedDict):
    has: _str


class _StringListFilterHasEveryInput(TypedDict):
    has_every: List[_str]


class _StringListFilterHasSomeInput(TypedDict):
    has_some: List[_str]


class _StringListFilterIsEmptyInput(TypedDict):
    is_empty: bool


StringListFilter = Union[
    _StringListFilterHasInput,
    _StringListFilterEqualsInput,
    _StringListFilterHasSomeInput,
    _StringListFilterIsEmptyInput,
    _StringListFilterHasEveryInput,
]


class _StringListUpdateSet(TypedDict):
    set: List[_str]


class _StringListUpdatePush(TypedDict):
    push: List[_str]


StringListUpdate = Union[
    List[_str],
    _StringListUpdateSet,
    _StringListUpdatePush,
]

class _BytesListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Base64']]


class _BytesListFilterHasInput(TypedDict):
    has: 'fields.Base64'


class _BytesListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Base64']


class _BytesListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Base64']


class _BytesListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BytesListFilter = Union[
    _BytesListFilterHasInput,
    _BytesListFilterEqualsInput,
    _BytesListFilterHasSomeInput,
    _BytesListFilterIsEmptyInput,
    _BytesListFilterHasEveryInput,
]


class _BytesListUpdateSet(TypedDict):
    set: List['fields.Base64']


class _BytesListUpdatePush(TypedDict):
    push: List['fields.Base64']


BytesListUpdate = Union[
    List['fields.Base64'],
    _BytesListUpdateSet,
    _BytesListUpdatePush,
]

class _DateTimeListFilterEqualsInput(TypedDict):
    equals: Optional[List[datetime.datetime]]


class _DateTimeListFilterHasInput(TypedDict):
    has: datetime.datetime


class _DateTimeListFilterHasEveryInput(TypedDict):
    has_every: List[datetime.datetime]


class _DateTimeListFilterHasSomeInput(TypedDict):
    has_some: List[datetime.datetime]


class _DateTimeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DateTimeListFilter = Union[
    _DateTimeListFilterHasInput,
    _DateTimeListFilterEqualsInput,
    _DateTimeListFilterHasSomeInput,
    _DateTimeListFilterIsEmptyInput,
    _DateTimeListFilterHasEveryInput,
]


class _DateTimeListUpdateSet(TypedDict):
    set: List[datetime.datetime]


class _DateTimeListUpdatePush(TypedDict):
    push: List[datetime.datetime]


DateTimeListUpdate = Union[
    List[datetime.datetime],
    _DateTimeListUpdateSet,
    _DateTimeListUpdatePush,
]

class _BooleanListFilterEqualsInput(TypedDict):
    equals: Optional[List[_bool]]


class _BooleanListFilterHasInput(TypedDict):
    has: _bool


class _BooleanListFilterHasEveryInput(TypedDict):
    has_every: List[_bool]


class _BooleanListFilterHasSomeInput(TypedDict):
    has_some: List[_bool]


class _BooleanListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BooleanListFilter = Union[
    _BooleanListFilterHasInput,
    _BooleanListFilterEqualsInput,
    _BooleanListFilterHasSomeInput,
    _BooleanListFilterIsEmptyInput,
    _BooleanListFilterHasEveryInput,
]


class _BooleanListUpdateSet(TypedDict):
    set: List[_bool]


class _BooleanListUpdatePush(TypedDict):
    push: List[_bool]


BooleanListUpdate = Union[
    List[_bool],
    _BooleanListUpdateSet,
    _BooleanListUpdatePush,
]

class _IntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _IntListFilterHasInput(TypedDict):
    has: _int


class _IntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _IntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _IntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


IntListFilter = Union[
    _IntListFilterHasInput,
    _IntListFilterEqualsInput,
    _IntListFilterHasSomeInput,
    _IntListFilterIsEmptyInput,
    _IntListFilterHasEveryInput,
]


class _IntListUpdateSet(TypedDict):
    set: List[_int]


class _IntListUpdatePush(TypedDict):
    push: List[_int]


IntListUpdate = Union[
    List[_int],
    _IntListUpdateSet,
    _IntListUpdatePush,
]

class _BigIntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _BigIntListFilterHasInput(TypedDict):
    has: _int


class _BigIntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _BigIntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _BigIntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BigIntListFilter = Union[
    _BigIntListFilterHasInput,
    _BigIntListFilterEqualsInput,
    _BigIntListFilterHasSomeInput,
    _BigIntListFilterIsEmptyInput,
    _BigIntListFilterHasEveryInput,
]


class _BigIntListUpdateSet(TypedDict):
    set: List[_int]


class _BigIntListUpdatePush(TypedDict):
    push: List[_int]


BigIntListUpdate = Union[
    List[_int],
    _BigIntListUpdateSet,
    _BigIntListUpdatePush,
]

class _FloatListFilterEqualsInput(TypedDict):
    equals: Optional[List[_float]]


class _FloatListFilterHasInput(TypedDict):
    has: _float


class _FloatListFilterHasEveryInput(TypedDict):
    has_every: List[_float]


class _FloatListFilterHasSomeInput(TypedDict):
    has_some: List[_float]


class _FloatListFilterIsEmptyInput(TypedDict):
    is_empty: bool


FloatListFilter = Union[
    _FloatListFilterHasInput,
    _FloatListFilterEqualsInput,
    _FloatListFilterHasSomeInput,
    _FloatListFilterIsEmptyInput,
    _FloatListFilterHasEveryInput,
]


class _FloatListUpdateSet(TypedDict):
    set: List[_float]


class _FloatListUpdatePush(TypedDict):
    push: List[_float]


FloatListUpdate = Union[
    List[_float],
    _FloatListUpdateSet,
    _FloatListUpdatePush,
]

class _JsonListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Json']]


class _JsonListFilterHasInput(TypedDict):
    has: 'fields.Json'


class _JsonListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Json']


class _JsonListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Json']


class _JsonListFilterIsEmptyInput(TypedDict):
    is_empty: bool


JsonListFilter = Union[
    _JsonListFilterHasInput,
    _JsonListFilterEqualsInput,
    _JsonListFilterHasSomeInput,
    _JsonListFilterIsEmptyInput,
    _JsonListFilterHasEveryInput,
]


class _JsonListUpdateSet(TypedDict):
    set: List['fields.Json']


class _JsonListUpdatePush(TypedDict):
    push: List['fields.Json']


JsonListUpdate = Union[
    List['fields.Json'],
    _JsonListUpdateSet,
    _JsonListUpdatePush,
]

class _DecimalListFilterEqualsInput(TypedDict):
    equals: Optional[List[decimal.Decimal]]


class _DecimalListFilterHasInput(TypedDict):
    has: decimal.Decimal


class _DecimalListFilterHasEveryInput(TypedDict):
    has_every: List[decimal.Decimal]


class _DecimalListFilterHasSomeInput(TypedDict):
    has_some: List[decimal.Decimal]


class _DecimalListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DecimalListFilter = Union[
    _DecimalListFilterHasInput,
    _DecimalListFilterEqualsInput,
    _DecimalListFilterHasSomeInput,
    _DecimalListFilterIsEmptyInput,
    _DecimalListFilterHasEveryInput,
]


class _DecimalListUpdateSet(TypedDict):
    set: List[decimal.Decimal]


class _DecimalListUpdatePush(TypedDict):
    push: List[decimal.Decimal]


DecimalListUpdate = Union[
    List[decimal.Decimal],
    _DecimalListUpdateSet,
    _DecimalListUpdatePush,
]


# batch types

class batchOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the batch create method"""
    id: _int
    UserID: _str


class batchCreateInput(batchOptionalCreateInput):
    """Required arguments to the batch create method"""
    dateRange: _str
    summary: _str
    batched: _bool


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class batchOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the batch create method, without relations"""
    id: _int
    UserID: _str


class batchCreateWithoutRelationsInput(batchOptionalCreateWithoutRelationsInput):
    """Required arguments to the batch create method, without relations"""
    dateRange: _str
    summary: _str
    batched: _bool


class batchCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'batchCreateWithoutRelationsInput'
    connect: 'batchWhereUniqueInput'


class batchCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['batchCreateWithoutRelationsInput', List['batchCreateWithoutRelationsInput']]
    connect: Union['batchWhereUniqueInput', List['batchWhereUniqueInput']]


_batchWhereUnique_id_Input = TypedDict(
    '_batchWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

batchWhereUniqueInput = _batchWhereUnique_id_Input


class batchUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    dateRange: _str
    summary: _str
    batched: _bool
    UserID: _str


class batchUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    dateRange: _str
    summary: _str
    batched: _bool
    UserID: _str


class batchUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['batchCreateWithoutRelationsInput']
    connect: List['batchWhereUniqueInput']
    set: List['batchWhereUniqueInput']
    disconnect: List['batchWhereUniqueInput']
    delete: List['batchWhereUniqueInput']

    # TODO
    # update: List['batchUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['batchUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['batchScalarWhereInput']
    # upsert: List['batchUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['batchCreateOrConnectWithoutRelationsInput']


class batchUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'batchCreateWithoutRelationsInput'
    connect: 'batchWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'batchUpdateInput'
    # upsert: 'batchUpsertWithoutRelationsInput'
    # connectOrCreate: 'batchCreateOrConnectWithoutRelationsInput'


class batchUpsertInput(TypedDict):
    create: 'batchCreateInput'
    update: 'batchUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_batch_id_OrderByInput = TypedDict(
    '_batch_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_batch_dateRange_OrderByInput = TypedDict(
    '_batch_dateRange_OrderByInput',
    {
        'dateRange': 'SortOrder',
    },
    total=True
)

_batch_summary_OrderByInput = TypedDict(
    '_batch_summary_OrderByInput',
    {
        'summary': 'SortOrder',
    },
    total=True
)

_batch_batched_OrderByInput = TypedDict(
    '_batch_batched_OrderByInput',
    {
        'batched': 'SortOrder',
    },
    total=True
)

_batch_UserID_OrderByInput = TypedDict(
    '_batch_UserID_OrderByInput',
    {
        'UserID': 'SortOrder',
    },
    total=True
)

batchOrderByInput = Union[
    '_batch_id_OrderByInput',
    '_batch_dateRange_OrderByInput',
    '_batch_summary_OrderByInput',
    '_batch_batched_OrderByInput',
    '_batch_UserID_OrderByInput',
]



# recursive batch types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

batchRelationFilter = TypedDict(
    'batchRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class batchListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class batchInclude(TypedDict, total=False):
    """batch relational arguments"""


    

class batchIncludeFrombatch(TypedDict, total=False):
    """Relational arguments for batch"""


class batchIncludeFrombatchRecursive1(TypedDict, total=False):
    """Relational arguments for batch"""


class batchIncludeFrombatchRecursive2(TypedDict, total=False):
    """Relational arguments for batch"""


class batchIncludeFrombatchRecursive3(TypedDict, total=False):
    """Relational arguments for batch"""


class batchIncludeFrombatchRecursive4(TypedDict, total=False):
    """Relational arguments for batch"""

    

class batchArgsFrombatch(TypedDict, total=False):
    """Arguments for batch"""
    include: 'batchIncludeFrombatchRecursive1'


class batchArgsFrombatchRecursive1(TypedDict, total=False):
    """Arguments for batch"""
    include: 'batchIncludeFrombatchRecursive2'


class batchArgsFrombatchRecursive2(TypedDict, total=False):
    """Arguments for batch"""
    include: 'batchIncludeFrombatchRecursive3'


class batchArgsFrombatchRecursive3(TypedDict, total=False):
    """Arguments for batch"""
    include: 'batchIncludeFrombatchRecursive4'


class batchArgsFrombatchRecursive4(TypedDict, total=False):
    """Arguments for batch"""
    
    

class FindManybatchArgsFrombatch(TypedDict, total=False):
    """Arguments for batch"""
    take: int
    skip: int
    order_by: Union['batchOrderByInput', List['batchOrderByInput']]
    where: 'batchWhereInput'
    cursor: 'batchWhereUniqueInput'
    distinct: List['batchScalarFieldKeys']
    include: 'batchIncludeFrombatchRecursive1'


class FindManybatchArgsFrombatchRecursive1(TypedDict, total=False):
    """Arguments for batch"""
    take: int
    skip: int
    order_by: Union['batchOrderByInput', List['batchOrderByInput']]
    where: 'batchWhereInput'
    cursor: 'batchWhereUniqueInput'
    distinct: List['batchScalarFieldKeys']
    include: 'batchIncludeFrombatchRecursive2'


class FindManybatchArgsFrombatchRecursive2(TypedDict, total=False):
    """Arguments for batch"""
    take: int
    skip: int
    order_by: Union['batchOrderByInput', List['batchOrderByInput']]
    where: 'batchWhereInput'
    cursor: 'batchWhereUniqueInput'
    distinct: List['batchScalarFieldKeys']
    include: 'batchIncludeFrombatchRecursive3'


class FindManybatchArgsFrombatchRecursive3(TypedDict, total=False):
    """Arguments for batch"""
    take: int
    skip: int
    order_by: Union['batchOrderByInput', List['batchOrderByInput']]
    where: 'batchWhereInput'
    cursor: 'batchWhereUniqueInput'
    distinct: List['batchScalarFieldKeys']
    include: 'batchIncludeFrombatchRecursive4'


class FindManybatchArgsFrombatchRecursive4(TypedDict, total=False):
    """Arguments for batch"""
    take: int
    skip: int
    order_by: Union['batchOrderByInput', List['batchOrderByInput']]
    where: 'batchWhereInput'
    cursor: 'batchWhereUniqueInput'
    distinct: List['batchScalarFieldKeys']
    
    

class logIncludeFrombatch(TypedDict, total=False):
    """Relational arguments for batch"""


class logIncludeFrombatchRecursive1(TypedDict, total=False):
    """Relational arguments for batch"""


class logIncludeFrombatchRecursive2(TypedDict, total=False):
    """Relational arguments for batch"""


class logIncludeFrombatchRecursive3(TypedDict, total=False):
    """Relational arguments for batch"""


class logIncludeFrombatchRecursive4(TypedDict, total=False):
    """Relational arguments for batch"""

    

class logArgsFrombatch(TypedDict, total=False):
    """Arguments for batch"""
    include: 'logIncludeFromlogRecursive1'


class logArgsFrombatchRecursive1(TypedDict, total=False):
    """Arguments for batch"""
    include: 'logIncludeFromlogRecursive2'


class logArgsFrombatchRecursive2(TypedDict, total=False):
    """Arguments for batch"""
    include: 'logIncludeFromlogRecursive3'


class logArgsFrombatchRecursive3(TypedDict, total=False):
    """Arguments for batch"""
    include: 'logIncludeFromlogRecursive4'


class logArgsFrombatchRecursive4(TypedDict, total=False):
    """Arguments for batch"""
    
    

class FindManylogArgsFrombatch(TypedDict, total=False):
    """Arguments for batch"""
    take: int
    skip: int
    order_by: Union['logOrderByInput', List['logOrderByInput']]
    where: 'logWhereInput'
    cursor: 'logWhereUniqueInput'
    distinct: List['logScalarFieldKeys']
    include: 'logIncludeFromlogRecursive1'


class FindManylogArgsFrombatchRecursive1(TypedDict, total=False):
    """Arguments for batch"""
    take: int
    skip: int
    order_by: Union['logOrderByInput', List['logOrderByInput']]
    where: 'logWhereInput'
    cursor: 'logWhereUniqueInput'
    distinct: List['logScalarFieldKeys']
    include: 'logIncludeFromlogRecursive2'


class FindManylogArgsFrombatchRecursive2(TypedDict, total=False):
    """Arguments for batch"""
    take: int
    skip: int
    order_by: Union['logOrderByInput', List['logOrderByInput']]
    where: 'logWhereInput'
    cursor: 'logWhereUniqueInput'
    distinct: List['logScalarFieldKeys']
    include: 'logIncludeFromlogRecursive3'


class FindManylogArgsFrombatchRecursive3(TypedDict, total=False):
    """Arguments for batch"""
    take: int
    skip: int
    order_by: Union['logOrderByInput', List['logOrderByInput']]
    where: 'logWhereInput'
    cursor: 'logWhereUniqueInput'
    distinct: List['logScalarFieldKeys']
    include: 'logIncludeFromlogRecursive4'


class FindManylogArgsFrombatchRecursive4(TypedDict, total=False):
    """Arguments for batch"""
    take: int
    skip: int
    order_by: Union['logOrderByInput', List['logOrderByInput']]
    where: 'logWhereInput'
    cursor: 'logWhereUniqueInput'
    distinct: List['logScalarFieldKeys']
    
    

class messageIncludeFrombatch(TypedDict, total=False):
    """Relational arguments for batch"""


class messageIncludeFrombatchRecursive1(TypedDict, total=False):
    """Relational arguments for batch"""


class messageIncludeFrombatchRecursive2(TypedDict, total=False):
    """Relational arguments for batch"""


class messageIncludeFrombatchRecursive3(TypedDict, total=False):
    """Relational arguments for batch"""


class messageIncludeFrombatchRecursive4(TypedDict, total=False):
    """Relational arguments for batch"""

    

class messageArgsFrombatch(TypedDict, total=False):
    """Arguments for batch"""
    include: 'messageIncludeFrommessageRecursive1'


class messageArgsFrombatchRecursive1(TypedDict, total=False):
    """Arguments for batch"""
    include: 'messageIncludeFrommessageRecursive2'


class messageArgsFrombatchRecursive2(TypedDict, total=False):
    """Arguments for batch"""
    include: 'messageIncludeFrommessageRecursive3'


class messageArgsFrombatchRecursive3(TypedDict, total=False):
    """Arguments for batch"""
    include: 'messageIncludeFrommessageRecursive4'


class messageArgsFrombatchRecursive4(TypedDict, total=False):
    """Arguments for batch"""
    
    

class FindManymessageArgsFrombatch(TypedDict, total=False):
    """Arguments for batch"""
    take: int
    skip: int
    order_by: Union['messageOrderByInput', List['messageOrderByInput']]
    where: 'messageWhereInput'
    cursor: 'messageWhereUniqueInput'
    distinct: List['messageScalarFieldKeys']
    include: 'messageIncludeFrommessageRecursive1'


class FindManymessageArgsFrombatchRecursive1(TypedDict, total=False):
    """Arguments for batch"""
    take: int
    skip: int
    order_by: Union['messageOrderByInput', List['messageOrderByInput']]
    where: 'messageWhereInput'
    cursor: 'messageWhereUniqueInput'
    distinct: List['messageScalarFieldKeys']
    include: 'messageIncludeFrommessageRecursive2'


class FindManymessageArgsFrombatchRecursive2(TypedDict, total=False):
    """Arguments for batch"""
    take: int
    skip: int
    order_by: Union['messageOrderByInput', List['messageOrderByInput']]
    where: 'messageWhereInput'
    cursor: 'messageWhereUniqueInput'
    distinct: List['messageScalarFieldKeys']
    include: 'messageIncludeFrommessageRecursive3'


class FindManymessageArgsFrombatchRecursive3(TypedDict, total=False):
    """Arguments for batch"""
    take: int
    skip: int
    order_by: Union['messageOrderByInput', List['messageOrderByInput']]
    where: 'messageWhereInput'
    cursor: 'messageWhereUniqueInput'
    distinct: List['messageScalarFieldKeys']
    include: 'messageIncludeFrommessageRecursive4'


class FindManymessageArgsFrombatchRecursive4(TypedDict, total=False):
    """Arguments for batch"""
    take: int
    skip: int
    order_by: Union['messageOrderByInput', List['messageOrderByInput']]
    where: 'messageWhereInput'
    cursor: 'messageWhereUniqueInput'
    distinct: List['messageScalarFieldKeys']
    


FindManybatchArgs = FindManybatchArgsFrombatch
FindFirstbatchArgs = FindManybatchArgsFrombatch


    

class batchWhereInput(TypedDict, total=False):
    """batch arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    dateRange: Union[_str, 'types.StringFilter']
    summary: Union[_str, 'types.StringFilter']
    batched: Union[_bool, 'types.BooleanFilter']
    UserID: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['batchWhereInputRecursive1', List['batchWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['batchWhereInputRecursive1']
    OR: List['batchWhereInputRecursive1']
    NOT: List['batchWhereInputRecursive1']


class batchWhereInputRecursive1(TypedDict, total=False):
    """batch arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    dateRange: Union[_str, 'types.StringFilter']
    summary: Union[_str, 'types.StringFilter']
    batched: Union[_bool, 'types.BooleanFilter']
    UserID: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['batchWhereInputRecursive2', List['batchWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['batchWhereInputRecursive2']
    OR: List['batchWhereInputRecursive2']
    NOT: List['batchWhereInputRecursive2']


class batchWhereInputRecursive2(TypedDict, total=False):
    """batch arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    dateRange: Union[_str, 'types.StringFilter']
    summary: Union[_str, 'types.StringFilter']
    batched: Union[_bool, 'types.BooleanFilter']
    UserID: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['batchWhereInputRecursive3', List['batchWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['batchWhereInputRecursive3']
    OR: List['batchWhereInputRecursive3']
    NOT: List['batchWhereInputRecursive3']


class batchWhereInputRecursive3(TypedDict, total=False):
    """batch arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    dateRange: Union[_str, 'types.StringFilter']
    summary: Union[_str, 'types.StringFilter']
    batched: Union[_bool, 'types.BooleanFilter']
    UserID: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['batchWhereInputRecursive4', List['batchWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['batchWhereInputRecursive4']
    OR: List['batchWhereInputRecursive4']
    NOT: List['batchWhereInputRecursive4']


class batchWhereInputRecursive4(TypedDict, total=False):
    """batch arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    dateRange: Union[_str, 'types.StringFilter']
    summary: Union[_str, 'types.StringFilter']
    batched: Union[_bool, 'types.BooleanFilter']
    UserID: Union[_str, 'types.StringFilter']



# aggregate batch types


    

class batchScalarWhereWithAggregatesInput(TypedDict, total=False):
    """batch arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    dateRange: Union[_str, 'types.StringWithAggregatesFilter']
    summary: Union[_str, 'types.StringWithAggregatesFilter']
    batched: Union[_bool, 'types.BooleanWithAggregatesFilter']
    UserID: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['batchScalarWhereWithAggregatesInputRecursive1']
    OR: List['batchScalarWhereWithAggregatesInputRecursive1']
    NOT: List['batchScalarWhereWithAggregatesInputRecursive1']


class batchScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """batch arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    dateRange: Union[_str, 'types.StringWithAggregatesFilter']
    summary: Union[_str, 'types.StringWithAggregatesFilter']
    batched: Union[_bool, 'types.BooleanWithAggregatesFilter']
    UserID: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['batchScalarWhereWithAggregatesInputRecursive2']
    OR: List['batchScalarWhereWithAggregatesInputRecursive2']
    NOT: List['batchScalarWhereWithAggregatesInputRecursive2']


class batchScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """batch arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    dateRange: Union[_str, 'types.StringWithAggregatesFilter']
    summary: Union[_str, 'types.StringWithAggregatesFilter']
    batched: Union[_bool, 'types.BooleanWithAggregatesFilter']
    UserID: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['batchScalarWhereWithAggregatesInputRecursive3']
    OR: List['batchScalarWhereWithAggregatesInputRecursive3']
    NOT: List['batchScalarWhereWithAggregatesInputRecursive3']


class batchScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """batch arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    dateRange: Union[_str, 'types.StringWithAggregatesFilter']
    summary: Union[_str, 'types.StringWithAggregatesFilter']
    batched: Union[_bool, 'types.BooleanWithAggregatesFilter']
    UserID: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['batchScalarWhereWithAggregatesInputRecursive4']
    OR: List['batchScalarWhereWithAggregatesInputRecursive4']
    NOT: List['batchScalarWhereWithAggregatesInputRecursive4']


class batchScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """batch arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    dateRange: Union[_str, 'types.StringWithAggregatesFilter']
    summary: Union[_str, 'types.StringWithAggregatesFilter']
    batched: Union[_bool, 'types.BooleanWithAggregatesFilter']
    UserID: Union[_str, 'types.StringWithAggregatesFilter']



class batchGroupByOutput(TypedDict, total=False):
    id: _int
    dateRange: _str
    summary: _str
    batched: _bool
    UserID: _str
    _sum: 'batchSumAggregateOutput'
    _avg: 'batchAvgAggregateOutput'
    _min: 'batchMinAggregateOutput'
    _max: 'batchMaxAggregateOutput'
    _count: 'batchCountAggregateOutput'


class batchAvgAggregateOutput(TypedDict, total=False):
    """batch output for aggregating averages"""
    id: float


class batchSumAggregateOutput(TypedDict, total=False):
    """batch output for aggregating sums"""
    id: _int


class batchScalarAggregateOutput(TypedDict, total=False):
    """batch output including scalar fields"""
    id: _int
    dateRange: _str
    summary: _str
    batched: _bool
    UserID: _str


batchMinAggregateOutput = batchScalarAggregateOutput
batchMaxAggregateOutput = batchScalarAggregateOutput


class batchMaxAggregateInput(TypedDict, total=False):
    """batch input for aggregating by max"""
    id: bool
    dateRange: bool
    summary: bool
    batched: bool
    UserID: bool


class batchMinAggregateInput(TypedDict, total=False):
    """batch input for aggregating by min"""
    id: bool
    dateRange: bool
    summary: bool
    batched: bool
    UserID: bool


class batchNumberAggregateInput(TypedDict, total=False):
    """batch input for aggregating numbers"""
    id: bool


batchAvgAggregateInput = batchNumberAggregateInput
batchSumAggregateInput = batchNumberAggregateInput


batchCountAggregateInput = TypedDict(
    'batchCountAggregateInput',
    {
        'id': bool,
        'dateRange': bool,
        'summary': bool,
        'batched': bool,
        'UserID': bool,
        '_all': bool,
    },
    total=False,
)

batchCountAggregateOutput = TypedDict(
    'batchCountAggregateOutput',
    {
        'id': int,
        'dateRange': int,
        'summary': int,
        'batched': int,
        'UserID': int,
        '_all': int,
    },
    total=False,
)


batchKeys = Literal[
    'id',
    'dateRange',
    'summary',
    'batched',
    'UserID',
]
batchScalarFieldKeys = Literal[
    'id',
    'dateRange',
    'summary',
    'batched',
    'UserID',
]
batchScalarFieldKeysT = TypeVar('batchScalarFieldKeysT', bound=batchScalarFieldKeys)

batchRelationalFieldKeys = _NoneType

# log types

class logOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the log create method"""
    id: _int
    SessionID: _str
    UserID: _str
    date: _str
    summary: _str
    body: _str
    batched: _bool


class logCreateInput(logOptionalCreateInput):
    """Required arguments to the log create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class logOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the log create method, without relations"""
    id: _int
    SessionID: _str
    UserID: _str
    date: _str
    summary: _str
    body: _str
    batched: _bool


class logCreateWithoutRelationsInput(logOptionalCreateWithoutRelationsInput):
    """Required arguments to the log create method, without relations"""


class logCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'logCreateWithoutRelationsInput'
    connect: 'logWhereUniqueInput'


class logCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['logCreateWithoutRelationsInput', List['logCreateWithoutRelationsInput']]
    connect: Union['logWhereUniqueInput', List['logWhereUniqueInput']]


_logWhereUnique_id_Input = TypedDict(
    '_logWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

logWhereUniqueInput = _logWhereUnique_id_Input


class logUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    SessionID: _str
    UserID: _str
    date: _str
    summary: _str
    body: _str
    batched: _bool


class logUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    SessionID: _str
    UserID: _str
    date: _str
    summary: _str
    body: _str
    batched: _bool


class logUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['logCreateWithoutRelationsInput']
    connect: List['logWhereUniqueInput']
    set: List['logWhereUniqueInput']
    disconnect: List['logWhereUniqueInput']
    delete: List['logWhereUniqueInput']

    # TODO
    # update: List['logUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['logUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['logScalarWhereInput']
    # upsert: List['logUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['logCreateOrConnectWithoutRelationsInput']


class logUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'logCreateWithoutRelationsInput'
    connect: 'logWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'logUpdateInput'
    # upsert: 'logUpsertWithoutRelationsInput'
    # connectOrCreate: 'logCreateOrConnectWithoutRelationsInput'


class logUpsertInput(TypedDict):
    create: 'logCreateInput'
    update: 'logUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_log_id_OrderByInput = TypedDict(
    '_log_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_log_SessionID_OrderByInput = TypedDict(
    '_log_SessionID_OrderByInput',
    {
        'SessionID': 'SortOrder',
    },
    total=True
)

_log_UserID_OrderByInput = TypedDict(
    '_log_UserID_OrderByInput',
    {
        'UserID': 'SortOrder',
    },
    total=True
)

_log_date_OrderByInput = TypedDict(
    '_log_date_OrderByInput',
    {
        'date': 'SortOrder',
    },
    total=True
)

_log_summary_OrderByInput = TypedDict(
    '_log_summary_OrderByInput',
    {
        'summary': 'SortOrder',
    },
    total=True
)

_log_body_OrderByInput = TypedDict(
    '_log_body_OrderByInput',
    {
        'body': 'SortOrder',
    },
    total=True
)

_log_batched_OrderByInput = TypedDict(
    '_log_batched_OrderByInput',
    {
        'batched': 'SortOrder',
    },
    total=True
)

logOrderByInput = Union[
    '_log_id_OrderByInput',
    '_log_SessionID_OrderByInput',
    '_log_UserID_OrderByInput',
    '_log_date_OrderByInput',
    '_log_summary_OrderByInput',
    '_log_body_OrderByInput',
    '_log_batched_OrderByInput',
]



# recursive log types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

logRelationFilter = TypedDict(
    'logRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class logListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class logInclude(TypedDict, total=False):
    """log relational arguments"""


    

class batchIncludeFromlog(TypedDict, total=False):
    """Relational arguments for log"""


class batchIncludeFromlogRecursive1(TypedDict, total=False):
    """Relational arguments for log"""


class batchIncludeFromlogRecursive2(TypedDict, total=False):
    """Relational arguments for log"""


class batchIncludeFromlogRecursive3(TypedDict, total=False):
    """Relational arguments for log"""


class batchIncludeFromlogRecursive4(TypedDict, total=False):
    """Relational arguments for log"""

    

class batchArgsFromlog(TypedDict, total=False):
    """Arguments for log"""
    include: 'batchIncludeFrombatchRecursive1'


class batchArgsFromlogRecursive1(TypedDict, total=False):
    """Arguments for log"""
    include: 'batchIncludeFrombatchRecursive2'


class batchArgsFromlogRecursive2(TypedDict, total=False):
    """Arguments for log"""
    include: 'batchIncludeFrombatchRecursive3'


class batchArgsFromlogRecursive3(TypedDict, total=False):
    """Arguments for log"""
    include: 'batchIncludeFrombatchRecursive4'


class batchArgsFromlogRecursive4(TypedDict, total=False):
    """Arguments for log"""
    
    

class FindManybatchArgsFromlog(TypedDict, total=False):
    """Arguments for log"""
    take: int
    skip: int
    order_by: Union['batchOrderByInput', List['batchOrderByInput']]
    where: 'batchWhereInput'
    cursor: 'batchWhereUniqueInput'
    distinct: List['batchScalarFieldKeys']
    include: 'batchIncludeFrombatchRecursive1'


class FindManybatchArgsFromlogRecursive1(TypedDict, total=False):
    """Arguments for log"""
    take: int
    skip: int
    order_by: Union['batchOrderByInput', List['batchOrderByInput']]
    where: 'batchWhereInput'
    cursor: 'batchWhereUniqueInput'
    distinct: List['batchScalarFieldKeys']
    include: 'batchIncludeFrombatchRecursive2'


class FindManybatchArgsFromlogRecursive2(TypedDict, total=False):
    """Arguments for log"""
    take: int
    skip: int
    order_by: Union['batchOrderByInput', List['batchOrderByInput']]
    where: 'batchWhereInput'
    cursor: 'batchWhereUniqueInput'
    distinct: List['batchScalarFieldKeys']
    include: 'batchIncludeFrombatchRecursive3'


class FindManybatchArgsFromlogRecursive3(TypedDict, total=False):
    """Arguments for log"""
    take: int
    skip: int
    order_by: Union['batchOrderByInput', List['batchOrderByInput']]
    where: 'batchWhereInput'
    cursor: 'batchWhereUniqueInput'
    distinct: List['batchScalarFieldKeys']
    include: 'batchIncludeFrombatchRecursive4'


class FindManybatchArgsFromlogRecursive4(TypedDict, total=False):
    """Arguments for log"""
    take: int
    skip: int
    order_by: Union['batchOrderByInput', List['batchOrderByInput']]
    where: 'batchWhereInput'
    cursor: 'batchWhereUniqueInput'
    distinct: List['batchScalarFieldKeys']
    
    

class logIncludeFromlog(TypedDict, total=False):
    """Relational arguments for log"""


class logIncludeFromlogRecursive1(TypedDict, total=False):
    """Relational arguments for log"""


class logIncludeFromlogRecursive2(TypedDict, total=False):
    """Relational arguments for log"""


class logIncludeFromlogRecursive3(TypedDict, total=False):
    """Relational arguments for log"""


class logIncludeFromlogRecursive4(TypedDict, total=False):
    """Relational arguments for log"""

    

class logArgsFromlog(TypedDict, total=False):
    """Arguments for log"""
    include: 'logIncludeFromlogRecursive1'


class logArgsFromlogRecursive1(TypedDict, total=False):
    """Arguments for log"""
    include: 'logIncludeFromlogRecursive2'


class logArgsFromlogRecursive2(TypedDict, total=False):
    """Arguments for log"""
    include: 'logIncludeFromlogRecursive3'


class logArgsFromlogRecursive3(TypedDict, total=False):
    """Arguments for log"""
    include: 'logIncludeFromlogRecursive4'


class logArgsFromlogRecursive4(TypedDict, total=False):
    """Arguments for log"""
    
    

class FindManylogArgsFromlog(TypedDict, total=False):
    """Arguments for log"""
    take: int
    skip: int
    order_by: Union['logOrderByInput', List['logOrderByInput']]
    where: 'logWhereInput'
    cursor: 'logWhereUniqueInput'
    distinct: List['logScalarFieldKeys']
    include: 'logIncludeFromlogRecursive1'


class FindManylogArgsFromlogRecursive1(TypedDict, total=False):
    """Arguments for log"""
    take: int
    skip: int
    order_by: Union['logOrderByInput', List['logOrderByInput']]
    where: 'logWhereInput'
    cursor: 'logWhereUniqueInput'
    distinct: List['logScalarFieldKeys']
    include: 'logIncludeFromlogRecursive2'


class FindManylogArgsFromlogRecursive2(TypedDict, total=False):
    """Arguments for log"""
    take: int
    skip: int
    order_by: Union['logOrderByInput', List['logOrderByInput']]
    where: 'logWhereInput'
    cursor: 'logWhereUniqueInput'
    distinct: List['logScalarFieldKeys']
    include: 'logIncludeFromlogRecursive3'


class FindManylogArgsFromlogRecursive3(TypedDict, total=False):
    """Arguments for log"""
    take: int
    skip: int
    order_by: Union['logOrderByInput', List['logOrderByInput']]
    where: 'logWhereInput'
    cursor: 'logWhereUniqueInput'
    distinct: List['logScalarFieldKeys']
    include: 'logIncludeFromlogRecursive4'


class FindManylogArgsFromlogRecursive4(TypedDict, total=False):
    """Arguments for log"""
    take: int
    skip: int
    order_by: Union['logOrderByInput', List['logOrderByInput']]
    where: 'logWhereInput'
    cursor: 'logWhereUniqueInput'
    distinct: List['logScalarFieldKeys']
    
    

class messageIncludeFromlog(TypedDict, total=False):
    """Relational arguments for log"""


class messageIncludeFromlogRecursive1(TypedDict, total=False):
    """Relational arguments for log"""


class messageIncludeFromlogRecursive2(TypedDict, total=False):
    """Relational arguments for log"""


class messageIncludeFromlogRecursive3(TypedDict, total=False):
    """Relational arguments for log"""


class messageIncludeFromlogRecursive4(TypedDict, total=False):
    """Relational arguments for log"""

    

class messageArgsFromlog(TypedDict, total=False):
    """Arguments for log"""
    include: 'messageIncludeFrommessageRecursive1'


class messageArgsFromlogRecursive1(TypedDict, total=False):
    """Arguments for log"""
    include: 'messageIncludeFrommessageRecursive2'


class messageArgsFromlogRecursive2(TypedDict, total=False):
    """Arguments for log"""
    include: 'messageIncludeFrommessageRecursive3'


class messageArgsFromlogRecursive3(TypedDict, total=False):
    """Arguments for log"""
    include: 'messageIncludeFrommessageRecursive4'


class messageArgsFromlogRecursive4(TypedDict, total=False):
    """Arguments for log"""
    
    

class FindManymessageArgsFromlog(TypedDict, total=False):
    """Arguments for log"""
    take: int
    skip: int
    order_by: Union['messageOrderByInput', List['messageOrderByInput']]
    where: 'messageWhereInput'
    cursor: 'messageWhereUniqueInput'
    distinct: List['messageScalarFieldKeys']
    include: 'messageIncludeFrommessageRecursive1'


class FindManymessageArgsFromlogRecursive1(TypedDict, total=False):
    """Arguments for log"""
    take: int
    skip: int
    order_by: Union['messageOrderByInput', List['messageOrderByInput']]
    where: 'messageWhereInput'
    cursor: 'messageWhereUniqueInput'
    distinct: List['messageScalarFieldKeys']
    include: 'messageIncludeFrommessageRecursive2'


class FindManymessageArgsFromlogRecursive2(TypedDict, total=False):
    """Arguments for log"""
    take: int
    skip: int
    order_by: Union['messageOrderByInput', List['messageOrderByInput']]
    where: 'messageWhereInput'
    cursor: 'messageWhereUniqueInput'
    distinct: List['messageScalarFieldKeys']
    include: 'messageIncludeFrommessageRecursive3'


class FindManymessageArgsFromlogRecursive3(TypedDict, total=False):
    """Arguments for log"""
    take: int
    skip: int
    order_by: Union['messageOrderByInput', List['messageOrderByInput']]
    where: 'messageWhereInput'
    cursor: 'messageWhereUniqueInput'
    distinct: List['messageScalarFieldKeys']
    include: 'messageIncludeFrommessageRecursive4'


class FindManymessageArgsFromlogRecursive4(TypedDict, total=False):
    """Arguments for log"""
    take: int
    skip: int
    order_by: Union['messageOrderByInput', List['messageOrderByInput']]
    where: 'messageWhereInput'
    cursor: 'messageWhereUniqueInput'
    distinct: List['messageScalarFieldKeys']
    


FindManylogArgs = FindManylogArgsFromlog
FindFirstlogArgs = FindManylogArgsFromlog


    

class logWhereInput(TypedDict, total=False):
    """log arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    SessionID: Union[_str, 'types.StringFilter']
    UserID: Union[_str, 'types.StringFilter']
    date: Union[_str, 'types.StringFilter']
    summary: Union[_str, 'types.StringFilter']
    body: Union[_str, 'types.StringFilter']
    batched: Union[_bool, 'types.BooleanFilter']

    # should be noted that AND and NOT should be Union['logWhereInputRecursive1', List['logWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['logWhereInputRecursive1']
    OR: List['logWhereInputRecursive1']
    NOT: List['logWhereInputRecursive1']


class logWhereInputRecursive1(TypedDict, total=False):
    """log arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    SessionID: Union[_str, 'types.StringFilter']
    UserID: Union[_str, 'types.StringFilter']
    date: Union[_str, 'types.StringFilter']
    summary: Union[_str, 'types.StringFilter']
    body: Union[_str, 'types.StringFilter']
    batched: Union[_bool, 'types.BooleanFilter']

    # should be noted that AND and NOT should be Union['logWhereInputRecursive2', List['logWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['logWhereInputRecursive2']
    OR: List['logWhereInputRecursive2']
    NOT: List['logWhereInputRecursive2']


class logWhereInputRecursive2(TypedDict, total=False):
    """log arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    SessionID: Union[_str, 'types.StringFilter']
    UserID: Union[_str, 'types.StringFilter']
    date: Union[_str, 'types.StringFilter']
    summary: Union[_str, 'types.StringFilter']
    body: Union[_str, 'types.StringFilter']
    batched: Union[_bool, 'types.BooleanFilter']

    # should be noted that AND and NOT should be Union['logWhereInputRecursive3', List['logWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['logWhereInputRecursive3']
    OR: List['logWhereInputRecursive3']
    NOT: List['logWhereInputRecursive3']


class logWhereInputRecursive3(TypedDict, total=False):
    """log arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    SessionID: Union[_str, 'types.StringFilter']
    UserID: Union[_str, 'types.StringFilter']
    date: Union[_str, 'types.StringFilter']
    summary: Union[_str, 'types.StringFilter']
    body: Union[_str, 'types.StringFilter']
    batched: Union[_bool, 'types.BooleanFilter']

    # should be noted that AND and NOT should be Union['logWhereInputRecursive4', List['logWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['logWhereInputRecursive4']
    OR: List['logWhereInputRecursive4']
    NOT: List['logWhereInputRecursive4']


class logWhereInputRecursive4(TypedDict, total=False):
    """log arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    SessionID: Union[_str, 'types.StringFilter']
    UserID: Union[_str, 'types.StringFilter']
    date: Union[_str, 'types.StringFilter']
    summary: Union[_str, 'types.StringFilter']
    body: Union[_str, 'types.StringFilter']
    batched: Union[_bool, 'types.BooleanFilter']



# aggregate log types


    

class logScalarWhereWithAggregatesInput(TypedDict, total=False):
    """log arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    SessionID: Union[_str, 'types.StringWithAggregatesFilter']
    UserID: Union[_str, 'types.StringWithAggregatesFilter']
    date: Union[_str, 'types.StringWithAggregatesFilter']
    summary: Union[_str, 'types.StringWithAggregatesFilter']
    body: Union[_str, 'types.StringWithAggregatesFilter']
    batched: Union[_bool, 'types.BooleanWithAggregatesFilter']

    AND: List['logScalarWhereWithAggregatesInputRecursive1']
    OR: List['logScalarWhereWithAggregatesInputRecursive1']
    NOT: List['logScalarWhereWithAggregatesInputRecursive1']


class logScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """log arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    SessionID: Union[_str, 'types.StringWithAggregatesFilter']
    UserID: Union[_str, 'types.StringWithAggregatesFilter']
    date: Union[_str, 'types.StringWithAggregatesFilter']
    summary: Union[_str, 'types.StringWithAggregatesFilter']
    body: Union[_str, 'types.StringWithAggregatesFilter']
    batched: Union[_bool, 'types.BooleanWithAggregatesFilter']

    AND: List['logScalarWhereWithAggregatesInputRecursive2']
    OR: List['logScalarWhereWithAggregatesInputRecursive2']
    NOT: List['logScalarWhereWithAggregatesInputRecursive2']


class logScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """log arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    SessionID: Union[_str, 'types.StringWithAggregatesFilter']
    UserID: Union[_str, 'types.StringWithAggregatesFilter']
    date: Union[_str, 'types.StringWithAggregatesFilter']
    summary: Union[_str, 'types.StringWithAggregatesFilter']
    body: Union[_str, 'types.StringWithAggregatesFilter']
    batched: Union[_bool, 'types.BooleanWithAggregatesFilter']

    AND: List['logScalarWhereWithAggregatesInputRecursive3']
    OR: List['logScalarWhereWithAggregatesInputRecursive3']
    NOT: List['logScalarWhereWithAggregatesInputRecursive3']


class logScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """log arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    SessionID: Union[_str, 'types.StringWithAggregatesFilter']
    UserID: Union[_str, 'types.StringWithAggregatesFilter']
    date: Union[_str, 'types.StringWithAggregatesFilter']
    summary: Union[_str, 'types.StringWithAggregatesFilter']
    body: Union[_str, 'types.StringWithAggregatesFilter']
    batched: Union[_bool, 'types.BooleanWithAggregatesFilter']

    AND: List['logScalarWhereWithAggregatesInputRecursive4']
    OR: List['logScalarWhereWithAggregatesInputRecursive4']
    NOT: List['logScalarWhereWithAggregatesInputRecursive4']


class logScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """log arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    SessionID: Union[_str, 'types.StringWithAggregatesFilter']
    UserID: Union[_str, 'types.StringWithAggregatesFilter']
    date: Union[_str, 'types.StringWithAggregatesFilter']
    summary: Union[_str, 'types.StringWithAggregatesFilter']
    body: Union[_str, 'types.StringWithAggregatesFilter']
    batched: Union[_bool, 'types.BooleanWithAggregatesFilter']



class logGroupByOutput(TypedDict, total=False):
    id: _int
    SessionID: _str
    UserID: _str
    date: _str
    summary: _str
    body: _str
    batched: _bool
    _sum: 'logSumAggregateOutput'
    _avg: 'logAvgAggregateOutput'
    _min: 'logMinAggregateOutput'
    _max: 'logMaxAggregateOutput'
    _count: 'logCountAggregateOutput'


class logAvgAggregateOutput(TypedDict, total=False):
    """log output for aggregating averages"""
    id: float


class logSumAggregateOutput(TypedDict, total=False):
    """log output for aggregating sums"""
    id: _int


class logScalarAggregateOutput(TypedDict, total=False):
    """log output including scalar fields"""
    id: _int
    SessionID: _str
    UserID: _str
    date: _str
    summary: _str
    body: _str
    batched: _bool


logMinAggregateOutput = logScalarAggregateOutput
logMaxAggregateOutput = logScalarAggregateOutput


class logMaxAggregateInput(TypedDict, total=False):
    """log input for aggregating by max"""
    id: bool
    SessionID: bool
    UserID: bool
    date: bool
    summary: bool
    body: bool
    batched: bool


class logMinAggregateInput(TypedDict, total=False):
    """log input for aggregating by min"""
    id: bool
    SessionID: bool
    UserID: bool
    date: bool
    summary: bool
    body: bool
    batched: bool


class logNumberAggregateInput(TypedDict, total=False):
    """log input for aggregating numbers"""
    id: bool


logAvgAggregateInput = logNumberAggregateInput
logSumAggregateInput = logNumberAggregateInput


logCountAggregateInput = TypedDict(
    'logCountAggregateInput',
    {
        'id': bool,
        'SessionID': bool,
        'UserID': bool,
        'date': bool,
        'summary': bool,
        'body': bool,
        'batched': bool,
        '_all': bool,
    },
    total=False,
)

logCountAggregateOutput = TypedDict(
    'logCountAggregateOutput',
    {
        'id': int,
        'SessionID': int,
        'UserID': int,
        'date': int,
        'summary': int,
        'body': int,
        'batched': int,
        '_all': int,
    },
    total=False,
)


logKeys = Literal[
    'id',
    'SessionID',
    'UserID',
    'date',
    'summary',
    'body',
    'batched',
]
logScalarFieldKeys = Literal[
    'id',
    'SessionID',
    'UserID',
    'date',
    'summary',
    'body',
    'batched',
]
logScalarFieldKeysT = TypeVar('logScalarFieldKeysT', bound=logScalarFieldKeys)

logRelationalFieldKeys = _NoneType

# message types

class messageOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the message create method"""
    id: _int


class messageCreateInput(messageOptionalCreateInput):
    """Required arguments to the message create method"""
    SessionID: _str
    UserID: _str
    name: _str
    timestamp: _str
    body: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class messageOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the message create method, without relations"""
    id: _int


class messageCreateWithoutRelationsInput(messageOptionalCreateWithoutRelationsInput):
    """Required arguments to the message create method, without relations"""
    SessionID: _str
    UserID: _str
    name: _str
    timestamp: _str
    body: _str


class messageCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'messageCreateWithoutRelationsInput'
    connect: 'messageWhereUniqueInput'


class messageCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['messageCreateWithoutRelationsInput', List['messageCreateWithoutRelationsInput']]
    connect: Union['messageWhereUniqueInput', List['messageWhereUniqueInput']]


_messageWhereUnique_id_Input = TypedDict(
    '_messageWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

messageWhereUniqueInput = _messageWhereUnique_id_Input


class messageUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    SessionID: _str
    UserID: _str
    name: _str
    timestamp: _str
    body: _str


class messageUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    SessionID: _str
    UserID: _str
    name: _str
    timestamp: _str
    body: _str


class messageUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['messageCreateWithoutRelationsInput']
    connect: List['messageWhereUniqueInput']
    set: List['messageWhereUniqueInput']
    disconnect: List['messageWhereUniqueInput']
    delete: List['messageWhereUniqueInput']

    # TODO
    # update: List['messageUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['messageUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['messageScalarWhereInput']
    # upsert: List['messageUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['messageCreateOrConnectWithoutRelationsInput']


class messageUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'messageCreateWithoutRelationsInput'
    connect: 'messageWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'messageUpdateInput'
    # upsert: 'messageUpsertWithoutRelationsInput'
    # connectOrCreate: 'messageCreateOrConnectWithoutRelationsInput'


class messageUpsertInput(TypedDict):
    create: 'messageCreateInput'
    update: 'messageUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_message_id_OrderByInput = TypedDict(
    '_message_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_message_SessionID_OrderByInput = TypedDict(
    '_message_SessionID_OrderByInput',
    {
        'SessionID': 'SortOrder',
    },
    total=True
)

_message_UserID_OrderByInput = TypedDict(
    '_message_UserID_OrderByInput',
    {
        'UserID': 'SortOrder',
    },
    total=True
)

_message_name_OrderByInput = TypedDict(
    '_message_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_message_timestamp_OrderByInput = TypedDict(
    '_message_timestamp_OrderByInput',
    {
        'timestamp': 'SortOrder',
    },
    total=True
)

_message_body_OrderByInput = TypedDict(
    '_message_body_OrderByInput',
    {
        'body': 'SortOrder',
    },
    total=True
)

messageOrderByInput = Union[
    '_message_id_OrderByInput',
    '_message_SessionID_OrderByInput',
    '_message_UserID_OrderByInput',
    '_message_name_OrderByInput',
    '_message_timestamp_OrderByInput',
    '_message_body_OrderByInput',
]



# recursive message types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

messageRelationFilter = TypedDict(
    'messageRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class messageListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class messageInclude(TypedDict, total=False):
    """message relational arguments"""


    

class batchIncludeFrommessage(TypedDict, total=False):
    """Relational arguments for message"""


class batchIncludeFrommessageRecursive1(TypedDict, total=False):
    """Relational arguments for message"""


class batchIncludeFrommessageRecursive2(TypedDict, total=False):
    """Relational arguments for message"""


class batchIncludeFrommessageRecursive3(TypedDict, total=False):
    """Relational arguments for message"""


class batchIncludeFrommessageRecursive4(TypedDict, total=False):
    """Relational arguments for message"""

    

class batchArgsFrommessage(TypedDict, total=False):
    """Arguments for message"""
    include: 'batchIncludeFrombatchRecursive1'


class batchArgsFrommessageRecursive1(TypedDict, total=False):
    """Arguments for message"""
    include: 'batchIncludeFrombatchRecursive2'


class batchArgsFrommessageRecursive2(TypedDict, total=False):
    """Arguments for message"""
    include: 'batchIncludeFrombatchRecursive3'


class batchArgsFrommessageRecursive3(TypedDict, total=False):
    """Arguments for message"""
    include: 'batchIncludeFrombatchRecursive4'


class batchArgsFrommessageRecursive4(TypedDict, total=False):
    """Arguments for message"""
    
    

class FindManybatchArgsFrommessage(TypedDict, total=False):
    """Arguments for message"""
    take: int
    skip: int
    order_by: Union['batchOrderByInput', List['batchOrderByInput']]
    where: 'batchWhereInput'
    cursor: 'batchWhereUniqueInput'
    distinct: List['batchScalarFieldKeys']
    include: 'batchIncludeFrombatchRecursive1'


class FindManybatchArgsFrommessageRecursive1(TypedDict, total=False):
    """Arguments for message"""
    take: int
    skip: int
    order_by: Union['batchOrderByInput', List['batchOrderByInput']]
    where: 'batchWhereInput'
    cursor: 'batchWhereUniqueInput'
    distinct: List['batchScalarFieldKeys']
    include: 'batchIncludeFrombatchRecursive2'


class FindManybatchArgsFrommessageRecursive2(TypedDict, total=False):
    """Arguments for message"""
    take: int
    skip: int
    order_by: Union['batchOrderByInput', List['batchOrderByInput']]
    where: 'batchWhereInput'
    cursor: 'batchWhereUniqueInput'
    distinct: List['batchScalarFieldKeys']
    include: 'batchIncludeFrombatchRecursive3'


class FindManybatchArgsFrommessageRecursive3(TypedDict, total=False):
    """Arguments for message"""
    take: int
    skip: int
    order_by: Union['batchOrderByInput', List['batchOrderByInput']]
    where: 'batchWhereInput'
    cursor: 'batchWhereUniqueInput'
    distinct: List['batchScalarFieldKeys']
    include: 'batchIncludeFrombatchRecursive4'


class FindManybatchArgsFrommessageRecursive4(TypedDict, total=False):
    """Arguments for message"""
    take: int
    skip: int
    order_by: Union['batchOrderByInput', List['batchOrderByInput']]
    where: 'batchWhereInput'
    cursor: 'batchWhereUniqueInput'
    distinct: List['batchScalarFieldKeys']
    
    

class logIncludeFrommessage(TypedDict, total=False):
    """Relational arguments for message"""


class logIncludeFrommessageRecursive1(TypedDict, total=False):
    """Relational arguments for message"""


class logIncludeFrommessageRecursive2(TypedDict, total=False):
    """Relational arguments for message"""


class logIncludeFrommessageRecursive3(TypedDict, total=False):
    """Relational arguments for message"""


class logIncludeFrommessageRecursive4(TypedDict, total=False):
    """Relational arguments for message"""

    

class logArgsFrommessage(TypedDict, total=False):
    """Arguments for message"""
    include: 'logIncludeFromlogRecursive1'


class logArgsFrommessageRecursive1(TypedDict, total=False):
    """Arguments for message"""
    include: 'logIncludeFromlogRecursive2'


class logArgsFrommessageRecursive2(TypedDict, total=False):
    """Arguments for message"""
    include: 'logIncludeFromlogRecursive3'


class logArgsFrommessageRecursive3(TypedDict, total=False):
    """Arguments for message"""
    include: 'logIncludeFromlogRecursive4'


class logArgsFrommessageRecursive4(TypedDict, total=False):
    """Arguments for message"""
    
    

class FindManylogArgsFrommessage(TypedDict, total=False):
    """Arguments for message"""
    take: int
    skip: int
    order_by: Union['logOrderByInput', List['logOrderByInput']]
    where: 'logWhereInput'
    cursor: 'logWhereUniqueInput'
    distinct: List['logScalarFieldKeys']
    include: 'logIncludeFromlogRecursive1'


class FindManylogArgsFrommessageRecursive1(TypedDict, total=False):
    """Arguments for message"""
    take: int
    skip: int
    order_by: Union['logOrderByInput', List['logOrderByInput']]
    where: 'logWhereInput'
    cursor: 'logWhereUniqueInput'
    distinct: List['logScalarFieldKeys']
    include: 'logIncludeFromlogRecursive2'


class FindManylogArgsFrommessageRecursive2(TypedDict, total=False):
    """Arguments for message"""
    take: int
    skip: int
    order_by: Union['logOrderByInput', List['logOrderByInput']]
    where: 'logWhereInput'
    cursor: 'logWhereUniqueInput'
    distinct: List['logScalarFieldKeys']
    include: 'logIncludeFromlogRecursive3'


class FindManylogArgsFrommessageRecursive3(TypedDict, total=False):
    """Arguments for message"""
    take: int
    skip: int
    order_by: Union['logOrderByInput', List['logOrderByInput']]
    where: 'logWhereInput'
    cursor: 'logWhereUniqueInput'
    distinct: List['logScalarFieldKeys']
    include: 'logIncludeFromlogRecursive4'


class FindManylogArgsFrommessageRecursive4(TypedDict, total=False):
    """Arguments for message"""
    take: int
    skip: int
    order_by: Union['logOrderByInput', List['logOrderByInput']]
    where: 'logWhereInput'
    cursor: 'logWhereUniqueInput'
    distinct: List['logScalarFieldKeys']
    
    

class messageIncludeFrommessage(TypedDict, total=False):
    """Relational arguments for message"""


class messageIncludeFrommessageRecursive1(TypedDict, total=False):
    """Relational arguments for message"""


class messageIncludeFrommessageRecursive2(TypedDict, total=False):
    """Relational arguments for message"""


class messageIncludeFrommessageRecursive3(TypedDict, total=False):
    """Relational arguments for message"""


class messageIncludeFrommessageRecursive4(TypedDict, total=False):
    """Relational arguments for message"""

    

class messageArgsFrommessage(TypedDict, total=False):
    """Arguments for message"""
    include: 'messageIncludeFrommessageRecursive1'


class messageArgsFrommessageRecursive1(TypedDict, total=False):
    """Arguments for message"""
    include: 'messageIncludeFrommessageRecursive2'


class messageArgsFrommessageRecursive2(TypedDict, total=False):
    """Arguments for message"""
    include: 'messageIncludeFrommessageRecursive3'


class messageArgsFrommessageRecursive3(TypedDict, total=False):
    """Arguments for message"""
    include: 'messageIncludeFrommessageRecursive4'


class messageArgsFrommessageRecursive4(TypedDict, total=False):
    """Arguments for message"""
    
    

class FindManymessageArgsFrommessage(TypedDict, total=False):
    """Arguments for message"""
    take: int
    skip: int
    order_by: Union['messageOrderByInput', List['messageOrderByInput']]
    where: 'messageWhereInput'
    cursor: 'messageWhereUniqueInput'
    distinct: List['messageScalarFieldKeys']
    include: 'messageIncludeFrommessageRecursive1'


class FindManymessageArgsFrommessageRecursive1(TypedDict, total=False):
    """Arguments for message"""
    take: int
    skip: int
    order_by: Union['messageOrderByInput', List['messageOrderByInput']]
    where: 'messageWhereInput'
    cursor: 'messageWhereUniqueInput'
    distinct: List['messageScalarFieldKeys']
    include: 'messageIncludeFrommessageRecursive2'


class FindManymessageArgsFrommessageRecursive2(TypedDict, total=False):
    """Arguments for message"""
    take: int
    skip: int
    order_by: Union['messageOrderByInput', List['messageOrderByInput']]
    where: 'messageWhereInput'
    cursor: 'messageWhereUniqueInput'
    distinct: List['messageScalarFieldKeys']
    include: 'messageIncludeFrommessageRecursive3'


class FindManymessageArgsFrommessageRecursive3(TypedDict, total=False):
    """Arguments for message"""
    take: int
    skip: int
    order_by: Union['messageOrderByInput', List['messageOrderByInput']]
    where: 'messageWhereInput'
    cursor: 'messageWhereUniqueInput'
    distinct: List['messageScalarFieldKeys']
    include: 'messageIncludeFrommessageRecursive4'


class FindManymessageArgsFrommessageRecursive4(TypedDict, total=False):
    """Arguments for message"""
    take: int
    skip: int
    order_by: Union['messageOrderByInput', List['messageOrderByInput']]
    where: 'messageWhereInput'
    cursor: 'messageWhereUniqueInput'
    distinct: List['messageScalarFieldKeys']
    


FindManymessageArgs = FindManymessageArgsFrommessage
FindFirstmessageArgs = FindManymessageArgsFrommessage


    

class messageWhereInput(TypedDict, total=False):
    """message arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    SessionID: Union[_str, 'types.StringFilter']
    UserID: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    timestamp: Union[_str, 'types.StringFilter']
    body: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['messageWhereInputRecursive1', List['messageWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['messageWhereInputRecursive1']
    OR: List['messageWhereInputRecursive1']
    NOT: List['messageWhereInputRecursive1']


class messageWhereInputRecursive1(TypedDict, total=False):
    """message arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    SessionID: Union[_str, 'types.StringFilter']
    UserID: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    timestamp: Union[_str, 'types.StringFilter']
    body: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['messageWhereInputRecursive2', List['messageWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['messageWhereInputRecursive2']
    OR: List['messageWhereInputRecursive2']
    NOT: List['messageWhereInputRecursive2']


class messageWhereInputRecursive2(TypedDict, total=False):
    """message arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    SessionID: Union[_str, 'types.StringFilter']
    UserID: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    timestamp: Union[_str, 'types.StringFilter']
    body: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['messageWhereInputRecursive3', List['messageWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['messageWhereInputRecursive3']
    OR: List['messageWhereInputRecursive3']
    NOT: List['messageWhereInputRecursive3']


class messageWhereInputRecursive3(TypedDict, total=False):
    """message arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    SessionID: Union[_str, 'types.StringFilter']
    UserID: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    timestamp: Union[_str, 'types.StringFilter']
    body: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['messageWhereInputRecursive4', List['messageWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['messageWhereInputRecursive4']
    OR: List['messageWhereInputRecursive4']
    NOT: List['messageWhereInputRecursive4']


class messageWhereInputRecursive4(TypedDict, total=False):
    """message arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    SessionID: Union[_str, 'types.StringFilter']
    UserID: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    timestamp: Union[_str, 'types.StringFilter']
    body: Union[_str, 'types.StringFilter']



# aggregate message types


    

class messageScalarWhereWithAggregatesInput(TypedDict, total=False):
    """message arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    SessionID: Union[_str, 'types.StringWithAggregatesFilter']
    UserID: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    timestamp: Union[_str, 'types.StringWithAggregatesFilter']
    body: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['messageScalarWhereWithAggregatesInputRecursive1']
    OR: List['messageScalarWhereWithAggregatesInputRecursive1']
    NOT: List['messageScalarWhereWithAggregatesInputRecursive1']


class messageScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """message arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    SessionID: Union[_str, 'types.StringWithAggregatesFilter']
    UserID: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    timestamp: Union[_str, 'types.StringWithAggregatesFilter']
    body: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['messageScalarWhereWithAggregatesInputRecursive2']
    OR: List['messageScalarWhereWithAggregatesInputRecursive2']
    NOT: List['messageScalarWhereWithAggregatesInputRecursive2']


class messageScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """message arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    SessionID: Union[_str, 'types.StringWithAggregatesFilter']
    UserID: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    timestamp: Union[_str, 'types.StringWithAggregatesFilter']
    body: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['messageScalarWhereWithAggregatesInputRecursive3']
    OR: List['messageScalarWhereWithAggregatesInputRecursive3']
    NOT: List['messageScalarWhereWithAggregatesInputRecursive3']


class messageScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """message arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    SessionID: Union[_str, 'types.StringWithAggregatesFilter']
    UserID: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    timestamp: Union[_str, 'types.StringWithAggregatesFilter']
    body: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['messageScalarWhereWithAggregatesInputRecursive4']
    OR: List['messageScalarWhereWithAggregatesInputRecursive4']
    NOT: List['messageScalarWhereWithAggregatesInputRecursive4']


class messageScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """message arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    SessionID: Union[_str, 'types.StringWithAggregatesFilter']
    UserID: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    timestamp: Union[_str, 'types.StringWithAggregatesFilter']
    body: Union[_str, 'types.StringWithAggregatesFilter']



class messageGroupByOutput(TypedDict, total=False):
    id: _int
    SessionID: _str
    UserID: _str
    name: _str
    timestamp: _str
    body: _str
    _sum: 'messageSumAggregateOutput'
    _avg: 'messageAvgAggregateOutput'
    _min: 'messageMinAggregateOutput'
    _max: 'messageMaxAggregateOutput'
    _count: 'messageCountAggregateOutput'


class messageAvgAggregateOutput(TypedDict, total=False):
    """message output for aggregating averages"""
    id: float


class messageSumAggregateOutput(TypedDict, total=False):
    """message output for aggregating sums"""
    id: _int


class messageScalarAggregateOutput(TypedDict, total=False):
    """message output including scalar fields"""
    id: _int
    SessionID: _str
    UserID: _str
    name: _str
    timestamp: _str
    body: _str


messageMinAggregateOutput = messageScalarAggregateOutput
messageMaxAggregateOutput = messageScalarAggregateOutput


class messageMaxAggregateInput(TypedDict, total=False):
    """message input for aggregating by max"""
    id: bool
    SessionID: bool
    UserID: bool
    name: bool
    timestamp: bool
    body: bool


class messageMinAggregateInput(TypedDict, total=False):
    """message input for aggregating by min"""
    id: bool
    SessionID: bool
    UserID: bool
    name: bool
    timestamp: bool
    body: bool


class messageNumberAggregateInput(TypedDict, total=False):
    """message input for aggregating numbers"""
    id: bool


messageAvgAggregateInput = messageNumberAggregateInput
messageSumAggregateInput = messageNumberAggregateInput


messageCountAggregateInput = TypedDict(
    'messageCountAggregateInput',
    {
        'id': bool,
        'SessionID': bool,
        'UserID': bool,
        'name': bool,
        'timestamp': bool,
        'body': bool,
        '_all': bool,
    },
    total=False,
)

messageCountAggregateOutput = TypedDict(
    'messageCountAggregateOutput',
    {
        'id': int,
        'SessionID': int,
        'UserID': int,
        'name': int,
        'timestamp': int,
        'body': int,
        '_all': int,
    },
    total=False,
)


messageKeys = Literal[
    'id',
    'SessionID',
    'UserID',
    'name',
    'timestamp',
    'body',
]
messageScalarFieldKeys = Literal[
    'id',
    'SessionID',
    'UserID',
    'name',
    'timestamp',
    'body',
]
messageScalarFieldKeysT = TypeVar('messageScalarFieldKeysT', bound=messageScalarFieldKeys)

messageRelationalFieldKeys = _NoneType



# we have to import ourselves as types can be namespaced to types
from . import types, enums, models, fields