# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off
from __future__ import annotations

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template actions.py.jinja --
from typing import TypeVar
import warnings

from . import types, errors, bases

if TYPE_CHECKING:
    from .client import Client
    from .bases import _PrismaModel


_PrismaModelT = TypeVar('_PrismaModelT', bound='_PrismaModel')


class batchActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: 'Client', model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.batch]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await batch.prisma().query_raw(
            'SELECT * FROM batch WHERE id = ?',
            1103527590,
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.batch
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await batch.prisma().query_first(
            'SELECT * FROM batch WHERE dateRange = ?',
            'dhheabfhf',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.batchCreateInput,
        include: Optional[types.batchInclude] = None
    ) -> _PrismaModelT:
        """Create a new batch record.

        Parameters
        ----------
        data
            batch record data
        include
            Specifies which relations should be loaded on the returned batch model

        Returns
        -------
        prisma.models.batch
            The created batch record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a batch record from just the required fields
        batch = await batch.prisma().create(
            data={
                # data to create a batch record
                'dateRange': 'ggciceaie',
                'summary': 'bbehjachib',
                'batched': True,
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='mutation',
            method='createOne',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return self._model.parse_obj(resp['data']['result'])

    async def create_many(
        self,
        data: List[types.batchCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple batch records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of batch record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await batch.prisma().create_many(
            data=[
                {
                    # data to create a batch record
                    'dateRange': 'dgiiaaijj',
                    'summary': 'bfaiacjjfc',
                    'batched': False,
                },
                {
                    # data to create a batch record
                    'dateRange': 'bagcfbhiig',
                    'summary': 'cghideieh',
                    'batched': True,
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        resp = await self._client._execute(
            operation='mutation',
            method='createMany',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.batchWhereUniqueInput,
        include: Optional[types.batchInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single batch record.

        Parameters
        ----------
        where
            batch filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned batch model

        Returns
        -------
        prisma.models.batch
            The deleted batch record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        batch = await batch.prisma().delete(
            where={
                'id': 836760821,
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                operation='mutation',
                method='deleteOne',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return self._model.parse_obj(resp['data']['result'])

    async def find_unique(
        self,
        where: types.batchWhereUniqueInput,
        include: Optional[types.batchInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique batch record.

        Parameters
        ----------
        where
            batch filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned batch model

        Returns
        -------
        prisma.models.batch
            The found batch record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        batch = await batch.prisma().find_unique(
            where={
                'id': 595337866,
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='query',
            method='findUnique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return self._model.parse_obj(result)

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.batchWhereInput] = None,
        cursor: Optional[types.batchWhereUniqueInput] = None,
        include: Optional[types.batchInclude] = None,
        order: Optional[Union[types.batchOrderByInput, List[types.batchOrderByInput]]] = None,
        distinct: Optional[List[types.batchScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple batch records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of batch records returned
        skip
            Ignore the first N results
        where
            batch filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned batch model
        order
            Order the returned batch records by any field
        distinct
            Filter batch records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.batch]
            The list of all batch records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 batch records
        batchs = await batch.prisma().find_many(take=10)

        # find the first 5 batch records ordered by the summary field
        batchs = await batch.prisma().find_many(
            take=5,
            order={
                'summary': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='query',
            method='findMany',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [self._model.parse_obj(r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.batchWhereInput] = None,
        cursor: Optional[types.batchWhereUniqueInput] = None,
        include: Optional[types.batchInclude] = None,
        order: Optional[Union[types.batchOrderByInput, List[types.batchOrderByInput]]] = None,
        distinct: Optional[List[types.batchScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single batch record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            batch filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned batch model
        order
            Order the returned batch records by any field
        distinct
            Filter batch records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.batch
            The first batch record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second batch record ordered by the batched field
        batch = await batch.prisma().find_first(
            skip=1,
            order={
                'batched': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='query',
            method='findFirst',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return self._model.parse_obj(result)

    async def update(
        self,
        data: types.batchUpdateInput,
        where: types.batchWhereUniqueInput,
        include: Optional[types.batchInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single batch record.

        Parameters
        ----------
        data
            batch record data specifying what to update
        where
            batch filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned batch model

        Returns
        -------
        prisma.models.batch
            The updated batch record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        batch = await batch.prisma().update(
            where={
                'id': 790425851,
            },
            data={
                # data to update the batch record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                operation='mutation',
                method='updateOne',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return self._model.parse_obj(resp['data']['result'])

    async def upsert(
        self,
        where: types.batchWhereUniqueInput,
        data: types.batchUpsertInput,
        include: Optional[types.batchInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            batch filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned batch model

        Returns
        -------
        prisma.models.batch
            The created or updated batch record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        batch = await batch.prisma().upsert(
            where={
                'id': 2111915288,
            },
            data={
                'create': {
                    'id': 2111915288,
                    'dateRange': 'bagcfbhiig',
                    'summary': 'cghideieh',
                    'batched': True,
                },
                'update': {
                    'dateRange': 'bagcfbhiig',
                    'summary': 'cghideieh',
                    'batched': True,
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='mutation',
            method='upsertOne',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return self._model.parse_obj(resp['data']['result'])

    async def update_many(
        self,
        data: types.batchUpdateManyMutationInput,
        where: types.batchWhereInput,
    ) -> int:
        """Update multiple batch records

        Parameters
        ----------
        data
            batch data to update the selected batch records to
        where
            Filter to select the batch records to update

        Returns
        -------
        int
            The total number of batch records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all batch records
        total = await batch.prisma().update_many(
            data={
                'UserID': 'bbejhfidcb'
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            operation='mutation',
            method='updateMany',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.batchWhereInput] = None,
        cursor: Optional[types.batchWhereUniqueInput] = None,
    ) -> int:
        """Count the number of batch records present in the database

        Parameters
        ----------
        select
            Select the batch fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            batch filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.batchCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await batch.prisma().count()

        # results: prisma.types.batchCountAggregateOutput
        results = await batch.prisma().count(
            select={
                '_all': True,
                'id': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.batchCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.batchWhereInput] = None,
        cursor: Optional[types.batchWhereUniqueInput] = None,
    ) -> types.batchCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.batchCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.batchWhereInput] = None,
        cursor: Optional[types.batchWhereUniqueInput] = None,
    ) -> Union[int, types.batchCountAggregateOutput]:
        """Count the number of batch records present in the database

        Parameters
        ----------
        select
            Select the batch fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            batch filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.batchCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await batch.prisma().count()

        # results: prisma.types.batchCountAggregateOutput
        results = await batch.prisma().count(
            select={
                '_all': True,
                'dateRange': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            operation='query',
            method='aggregate',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.batchCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.batchWhereInput] = None
    ) -> int:
        """Delete multiple batch records.

        Parameters
        ----------
        where
            Optional batch filter to find the records to be deleted

        Returns
        -------
        int
            The total number of batch records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all batch records
        total = await batch.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            operation='mutation',
            method='deleteMany',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.batchScalarFieldKeys'],
        *,
        where: Optional['types.batchWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.batchAvgAggregateInput'] = None,
        sum: Optional['types.batchSumAggregateInput'] = None,
        min: Optional['types.batchMinAggregateInput'] = None,
        max: Optional['types.batchMaxAggregateInput'] = None,
        having: Optional['types.batchScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.batchCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.batchScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.batchScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.batchGroupByOutput']:
        """Group batch records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar batch fields to group records by
        where
            batch filter to select records
        take
            Limit the maximum number of batch records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.batchGroupByOutput]
            A list of dictionaries representing the batch record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group batch records by summary values
        # and count how many records are in each group
        results = await batch.prisma().group_by(
            ['summary'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            operation='query',
            method='groupBy',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class logActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: 'Client', model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.log]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await log.prisma().query_raw(
            'SELECT * FROM log WHERE id = ?',
            1644289366,
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.log
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await log.prisma().query_first(
            'SELECT * FROM log WHERE SessionID = ?',
            'bdiicjafbj',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.logCreateInput,
        include: Optional[types.logInclude] = None
    ) -> _PrismaModelT:
        """Create a new log record.

        Parameters
        ----------
        data
            log record data
        include
            Specifies which relations should be loaded on the returned log model

        Returns
        -------
        prisma.models.log
            The created log record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a log record from just the required fields
        log = await log.prisma().create(
            data={
                # data to create a log record
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='mutation',
            method='createOne',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return self._model.parse_obj(resp['data']['result'])

    async def create_many(
        self,
        data: List[types.logCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple log records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of log record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await log.prisma().create_many(
            data=[
                {
                    # data to create a log record
                },
                {
                    # data to create a log record
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        resp = await self._client._execute(
            operation='mutation',
            method='createMany',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.logWhereUniqueInput,
        include: Optional[types.logInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single log record.

        Parameters
        ----------
        where
            log filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned log model

        Returns
        -------
        prisma.models.log
            The deleted log record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        log = await log.prisma().delete(
            where={
                'id': 1647418052,
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                operation='mutation',
                method='deleteOne',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return self._model.parse_obj(resp['data']['result'])

    async def find_unique(
        self,
        where: types.logWhereUniqueInput,
        include: Optional[types.logInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique log record.

        Parameters
        ----------
        where
            log filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned log model

        Returns
        -------
        prisma.models.log
            The found log record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        log = await log.prisma().find_unique(
            where={
                'id': 1675546029,
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='query',
            method='findUnique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return self._model.parse_obj(result)

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.logWhereInput] = None,
        cursor: Optional[types.logWhereUniqueInput] = None,
        include: Optional[types.logInclude] = None,
        order: Optional[Union[types.logOrderByInput, List[types.logOrderByInput]]] = None,
        distinct: Optional[List[types.logScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple log records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of log records returned
        skip
            Ignore the first N results
        where
            log filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned log model
        order
            Order the returned log records by any field
        distinct
            Filter log records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.log]
            The list of all log records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 log records
        logs = await log.prisma().find_many(take=10)

        # find the first 5 log records ordered by the UserID field
        logs = await log.prisma().find_many(
            take=5,
            order={
                'UserID': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='query',
            method='findMany',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [self._model.parse_obj(r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.logWhereInput] = None,
        cursor: Optional[types.logWhereUniqueInput] = None,
        include: Optional[types.logInclude] = None,
        order: Optional[Union[types.logOrderByInput, List[types.logOrderByInput]]] = None,
        distinct: Optional[List[types.logScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single log record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            log filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned log model
        order
            Order the returned log records by any field
        distinct
            Filter log records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.log
            The first log record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second log record ordered by the date field
        log = await log.prisma().find_first(
            skip=1,
            order={
                'date': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='query',
            method='findFirst',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return self._model.parse_obj(result)

    async def update(
        self,
        data: types.logUpdateInput,
        where: types.logWhereUniqueInput,
        include: Optional[types.logInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single log record.

        Parameters
        ----------
        data
            log record data specifying what to update
        where
            log filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned log model

        Returns
        -------
        prisma.models.log
            The updated log record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        log = await log.prisma().update(
            where={
                'id': 1767274722,
            },
            data={
                # data to update the log record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                operation='mutation',
                method='updateOne',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return self._model.parse_obj(resp['data']['result'])

    async def upsert(
        self,
        where: types.logWhereUniqueInput,
        data: types.logUpsertInput,
        include: Optional[types.logInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            log filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned log model

        Returns
        -------
        prisma.models.log
            The created or updated log record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        log = await log.prisma().upsert(
            where={
                'id': 326272115,
            },
            data={
                'create': {
                    'id': 326272115,
                },
                'update': {
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='mutation',
            method='upsertOne',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return self._model.parse_obj(resp['data']['result'])

    async def update_many(
        self,
        data: types.logUpdateManyMutationInput,
        where: types.logWhereInput,
    ) -> int:
        """Update multiple log records

        Parameters
        ----------
        data
            log data to update the selected log records to
        where
            Filter to select the log records to update

        Returns
        -------
        int
            The total number of log records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all log records
        total = await log.prisma().update_many(
            data={
                'summary': 'bdedcabahc'
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            operation='mutation',
            method='updateMany',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.logWhereInput] = None,
        cursor: Optional[types.logWhereUniqueInput] = None,
    ) -> int:
        """Count the number of log records present in the database

        Parameters
        ----------
        select
            Select the log fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            log filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.logCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await log.prisma().count()

        # results: prisma.types.logCountAggregateOutput
        results = await log.prisma().count(
            select={
                '_all': True,
                'body': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.logCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.logWhereInput] = None,
        cursor: Optional[types.logWhereUniqueInput] = None,
    ) -> types.logCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.logCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.logWhereInput] = None,
        cursor: Optional[types.logWhereUniqueInput] = None,
    ) -> Union[int, types.logCountAggregateOutput]:
        """Count the number of log records present in the database

        Parameters
        ----------
        select
            Select the log fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            log filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.logCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await log.prisma().count()

        # results: prisma.types.logCountAggregateOutput
        results = await log.prisma().count(
            select={
                '_all': True,
                'batched': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            operation='query',
            method='aggregate',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.logCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.logWhereInput] = None
    ) -> int:
        """Delete multiple log records.

        Parameters
        ----------
        where
            Optional log filter to find the records to be deleted

        Returns
        -------
        int
            The total number of log records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all log records
        total = await log.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            operation='mutation',
            method='deleteMany',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.logScalarFieldKeys'],
        *,
        where: Optional['types.logWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.logAvgAggregateInput'] = None,
        sum: Optional['types.logSumAggregateInput'] = None,
        min: Optional['types.logMinAggregateInput'] = None,
        max: Optional['types.logMaxAggregateInput'] = None,
        having: Optional['types.logScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.logCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.logScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.logScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.logGroupByOutput']:
        """Group log records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar log fields to group records by
        where
            log filter to select records
        take
            Limit the maximum number of log records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.logGroupByOutput]
            A list of dictionaries representing the log record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group log records by id values
        # and count how many records are in each group
        results = await log.prisma().group_by(
            ['id'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            operation='query',
            method='groupBy',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class messageActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: 'Client', model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.message]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await message.prisma().query_raw(
            'SELECT * FROM message WHERE id = ?',
            675780521,
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.message
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await message.prisma().query_first(
            'SELECT * FROM message WHERE SessionID = ?',
            'heejgedji',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.messageCreateInput,
        include: Optional[types.messageInclude] = None
    ) -> _PrismaModelT:
        """Create a new message record.

        Parameters
        ----------
        data
            message record data
        include
            Specifies which relations should be loaded on the returned message model

        Returns
        -------
        prisma.models.message
            The created message record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a message record from just the required fields
        message = await message.prisma().create(
            data={
                # data to create a message record
                'SessionID': 'bjgjgibgbf',
                'UserID': 'bbbgbhfjge',
                'name': 'igbehcbab',
                'timestamp': 'bdadaadhag',
                'body': 'bgiggdidbf',
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='mutation',
            method='createOne',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return self._model.parse_obj(resp['data']['result'])

    async def create_many(
        self,
        data: List[types.messageCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple message records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of message record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await message.prisma().create_many(
            data=[
                {
                    # data to create a message record
                    'SessionID': 'caaaedabfc',
                    'UserID': 'bigibebcib',
                    'name': 'bigaiehgcc',
                    'timestamp': 'beeifcbebf',
                    'body': 'bgcigfahea',
                },
                {
                    # data to create a message record
                    'SessionID': 'bcejgaggif',
                    'UserID': 'idfjadbcc',
                    'name': 'hgdhbjhhj',
                    'timestamp': 'ecjjjfbae',
                    'body': 'bhhfibbigf',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        resp = await self._client._execute(
            operation='mutation',
            method='createMany',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.messageWhereUniqueInput,
        include: Optional[types.messageInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single message record.

        Parameters
        ----------
        where
            message filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned message model

        Returns
        -------
        prisma.models.message
            The deleted message record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        message = await message.prisma().delete(
            where={
                'id': 893145566,
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                operation='mutation',
                method='deleteOne',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return self._model.parse_obj(resp['data']['result'])

    async def find_unique(
        self,
        where: types.messageWhereUniqueInput,
        include: Optional[types.messageInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique message record.

        Parameters
        ----------
        where
            message filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned message model

        Returns
        -------
        prisma.models.message
            The found message record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        message = await message.prisma().find_unique(
            where={
                'id': 995405759,
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='query',
            method='findUnique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return self._model.parse_obj(result)

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.messageWhereInput] = None,
        cursor: Optional[types.messageWhereUniqueInput] = None,
        include: Optional[types.messageInclude] = None,
        order: Optional[Union[types.messageOrderByInput, List[types.messageOrderByInput]]] = None,
        distinct: Optional[List[types.messageScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple message records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of message records returned
        skip
            Ignore the first N results
        where
            message filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned message model
        order
            Order the returned message records by any field
        distinct
            Filter message records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.message]
            The list of all message records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 message records
        messages = await message.prisma().find_many(take=10)

        # find the first 5 message records ordered by the UserID field
        messages = await message.prisma().find_many(
            take=5,
            order={
                'UserID': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='query',
            method='findMany',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [self._model.parse_obj(r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.messageWhereInput] = None,
        cursor: Optional[types.messageWhereUniqueInput] = None,
        include: Optional[types.messageInclude] = None,
        order: Optional[Union[types.messageOrderByInput, List[types.messageOrderByInput]]] = None,
        distinct: Optional[List[types.messageScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single message record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            message filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned message model
        order
            Order the returned message records by any field
        distinct
            Filter message records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.message
            The first message record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second message record ordered by the name field
        message = await message.prisma().find_first(
            skip=1,
            order={
                'name': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='query',
            method='findFirst',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return self._model.parse_obj(result)

    async def update(
        self,
        data: types.messageUpdateInput,
        where: types.messageWhereUniqueInput,
        include: Optional[types.messageInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single message record.

        Parameters
        ----------
        data
            message record data specifying what to update
        where
            message filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned message model

        Returns
        -------
        prisma.models.message
            The updated message record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        message = await message.prisma().update(
            where={
                'id': 2102736524,
            },
            data={
                # data to update the message record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                operation='mutation',
                method='updateOne',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return self._model.parse_obj(resp['data']['result'])

    async def upsert(
        self,
        where: types.messageWhereUniqueInput,
        data: types.messageUpsertInput,
        include: Optional[types.messageInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            message filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned message model

        Returns
        -------
        prisma.models.message
            The created or updated message record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        message = await message.prisma().upsert(
            where={
                'id': 271520213,
            },
            data={
                'create': {
                    'id': 271520213,
                    'SessionID': 'bcejgaggif',
                    'UserID': 'idfjadbcc',
                    'name': 'hgdhbjhhj',
                    'timestamp': 'ecjjjfbae',
                    'body': 'bhhfibbigf',
                },
                'update': {
                    'SessionID': 'bcejgaggif',
                    'UserID': 'idfjadbcc',
                    'name': 'hgdhbjhhj',
                    'timestamp': 'ecjjjfbae',
                    'body': 'bhhfibbigf',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='mutation',
            method='upsertOne',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return self._model.parse_obj(resp['data']['result'])

    async def update_many(
        self,
        data: types.messageUpdateManyMutationInput,
        where: types.messageWhereInput,
    ) -> int:
        """Update multiple message records

        Parameters
        ----------
        data
            message data to update the selected message records to
        where
            Filter to select the message records to update

        Returns
        -------
        int
            The total number of message records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all message records
        total = await message.prisma().update_many(
            data={
                'timestamp': 'efggddide'
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            operation='mutation',
            method='updateMany',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.messageWhereInput] = None,
        cursor: Optional[types.messageWhereUniqueInput] = None,
    ) -> int:
        """Count the number of message records present in the database

        Parameters
        ----------
        select
            Select the message fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            message filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.messageCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await message.prisma().count()

        # results: prisma.types.messageCountAggregateOutput
        results = await message.prisma().count(
            select={
                '_all': True,
                'body': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.messageCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.messageWhereInput] = None,
        cursor: Optional[types.messageWhereUniqueInput] = None,
    ) -> types.messageCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.messageCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.messageWhereInput] = None,
        cursor: Optional[types.messageWhereUniqueInput] = None,
    ) -> Union[int, types.messageCountAggregateOutput]:
        """Count the number of message records present in the database

        Parameters
        ----------
        select
            Select the message fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            message filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.messageCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await message.prisma().count()

        # results: prisma.types.messageCountAggregateOutput
        results = await message.prisma().count(
            select={
                '_all': True,
                'id': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            operation='query',
            method='aggregate',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.messageCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.messageWhereInput] = None
    ) -> int:
        """Delete multiple message records.

        Parameters
        ----------
        where
            Optional message filter to find the records to be deleted

        Returns
        -------
        int
            The total number of message records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all message records
        total = await message.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            operation='mutation',
            method='deleteMany',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.messageScalarFieldKeys'],
        *,
        where: Optional['types.messageWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.messageAvgAggregateInput'] = None,
        sum: Optional['types.messageSumAggregateInput'] = None,
        min: Optional['types.messageMinAggregateInput'] = None,
        max: Optional['types.messageMaxAggregateInput'] = None,
        having: Optional['types.messageScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.messageCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.messageScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.messageScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.messageGroupByOutput']:
        """Group message records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar message fields to group records by
        where
            message filter to select records
        take
            Limit the maximum number of message records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.messageGroupByOutput]
            A list of dictionaries representing the message record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group message records by SessionID values
        # and count how many records are in each group
        results = await message.prisma().group_by(
            ['SessionID'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            operation='query',
            method='groupBy',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]



def _select_fields(root: str, select: Mapping[str, Any]) -> str:
    """Helper to build a GraphQL selection string

    This is a work around until field selection is added to the query builder.
    """

    return root + ' {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))


from . import models
